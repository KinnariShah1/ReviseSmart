// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  // @@index([userId], name: "idx_account_userId")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "idx_session_userId")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  credits       Int       @default(10)

  accounts Account[]
  sessions Session[]
  games  Game[] 
}

// course contains many units
model Course {
  id    String @id @default(cuid())
  name  String
  image String
  units Unit[]
}

// unit contains many chapters
model Unit {
  id       String @id @default(cuid())
  courseId String

  name     String
  course   Course    @relation(fields: [courseId], references: [id])
  chapters Chapter[]

  @@index([courseId], name: "courseId")
}

model Chapter {
  id     String @id @default(cuid())
  unitId String

  name               String
  youtubeSearchQuery String
  videoId            String?
  summary            String?    @db.VarChar(3000)
  unit               Unit       @relation(fields: [unitId], references: [id])
  questions          Question[]

  @@index([unitId], name: "unitId")
}

model Question {
  id        String @id @default(cuid())
  chapterId String

  question String  @db.VarChar(3000)
  answer   String  @db.VarChar(3000)
  options  String  @db.VarChar(3000)
  chapter  Chapter @relation(fields: [chapterId], references: [id])

  @@index([chapterId], name: "chapterId")
}

// Define the GameType enum
enum GameType {
  mcq
  open_ended
}

// Define the Game model
model Game {
  id          String     @id @default(uuid()) // Use UUID instead of cuid() for PostgreSQL compatibility
  userId      String
  quizquestions   QuizQuestion[]
  timeStarted DateTime
  topic       String
  timeEnded   DateTime?
  gameType    GameType   // Enum remains the same
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Define the topic_count model
model topic_count {
  id    String @id @default(uuid()) // UUID for consistency with Supabase
  topic String @unique
  count Int
}

// Define the Question model
model QuizQuestion {
  id                String   @id @default(uuid())
  question          String
  answer            String
  gameId            String
  options           Json? // for mcq questions
  percentageCorrect Float? // for open_ended questions
  isCorrect         Boolean? // for mcq questions
  questionType      GameType
  userAnswer        String?

  game Game @relation(fields: [gameId], references: [id])

  @@index([gameId])
}